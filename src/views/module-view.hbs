<link href="https://cdn.lineicons.com/4.0/lineicons.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-sm-4">
            <div class="modules-level-1 card custom-card">
                <!-- Header của card -->
                <div class="card-header bg-white border-0 align-items-center">
                    <div class="row">
                        <div class="col">
                            <h3 class="card-title">Modules</h3>
                        </div>
                    </div>
                </div>
                <div class="custom-divider"></div>
                <!-- Nội dung (body) của card -->
                <div class="card-body p-0">
                    <div id="modulesLevel1" class="d-flex flex-column gap-3 modules-list px-4 py-3" style="color: #232360; font-weight: 700; font-size: 1.1rem;">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="modules-level-2 card custom-card">
                <!-- Header của card -->
                <div class="card-header bg-white border-0 align-items-center">
                    <div class="row">
                        <div class="col">
                            <h3 class="card-title">Sub Modules</h3>
                        </div>
                    </div>
                </div>
                <div class="custom-divider"></div>
                <!-- Nội dung (body) của card -->
                <div class="card-body p-0">
                    <div id="modulesLevel2" class="d-flex flex-column gap-3 modules-list px-4 py-3" style="color: #232360; font-weight: 700; font-size: 1.1rem;">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="modules-level-3 card custom-card">
                <!-- Header của card -->
                <div class="card-header bg-white border-0 align-items-center">
                    <div class="row">
                        <div class="col">
                            <h3 class="card-title">SubSub Modules</h3>
                        </div>
                    </div>
                </div>
                <div class="custom-divider"></div>
                <!-- Nội dung (body) của card -->
                <div class="card-body p-0">
                    <div id="modulesLevel3" class="d-flex flex-column gap-3 modules-list px-4 py-3" style="color: #232360; font-weight: 700; font-size: 1.1rem;">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{!-- Create Module Modal --}}
<div class="modal fade" id="modalAddModules" tabindex="1" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
        <div class="modal-content align-items-center" style="color: #232360; font-weight: 900; padding: 0 6%; background-color: #F3F4F8;">
            <div class="modal-header" style="border-bottom: none;">
                <p class="modal-title fs-3" id="modalTitleId">Add Modules</p>
            </div>
            <div class="modal-body" style="border-bottom: none; width: 100%;">
                <div class="row mb-3">
                    <div>
                        <label for="description">Select Root Module:</label>
                        <select name="module-selection" class="form-select overflow-y">
                            <option value="0">Home Page</option>
                            <option value="00">Home Page/Header Section</option>
                            <option value="01">Home Page/Content</option>
                            <option value="02">Home Page/Detail</option>
                            <option value="1">Detail</option>
                            <option value="2">Footer Section</option>
                        </select>
                    </div>
                </div>
                <div class="row mb-3">
                    <div>
                        <label for="modules-name">Modules Name<span style="color: red">*</span>:</label>
                        <input type="text" class="form-control" name="modules-name" id="modules-name" placeholder="Enter Module Name" required>
                        <div id="alertMessage" style="display: none; color: red"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="border-top: none; align-items: center;">
                <button type="button" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

{{!-- Page's Functionality Button --}}
{{#block "additional-button"}}
<div class="text-right">
    <button type="button" class="btn btn-light-green me-2">
        <i class="fas fa-download"></i>  
        Import/Export
    </button>
    <button type="button" class="btn btn-light-green me-2" data-bs-toggle="modal" data-bs-target="#modalAddModules">
        <i class="fas fa-plus-square"></i>  
        Add Modules
    </button>
</div>
{{/block}}

{{!-- Additional Scripts + CSS --}}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.2/dropzone.min.css" />
<script src="/js/addModuleModal.js"></script>

<script>
    const modules = {{{modules}}};

    function displayModules(rootModuleName, modules, containerId, onClickFunction) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';

        if (containerId === 'modulesLevel2') {
            document.querySelector('.modules-level-2 .card-title').textContent = rootModuleName;
            document.querySelector('.modules-level-3 .card-title').textContent = 'SubSub Modules';
        } else if (containerId === 'modulesLevel3') {
            document.querySelector('.modules-level-3 .card-title').textContent = rootModuleName;
        }

        if (!modules || modules.length === 0) {
            const emptyModuleItem = document.createElement('div');
            emptyModuleItem.className = 'card';
            emptyModuleItem.style = 'border: 2px dashed #000;';
            
            const cardBody = document.createElement('div');
            cardBody.className = 'card-body d-flex align-items-center justify-content-center';
            cardBody.textContent = 'Click to add new module';

            emptyModuleItem.appendChild(cardBody);
            container.appendChild(emptyModuleItem);
        } else {
            modules.forEach(module => {
                const moduleItem = document.createElement('div');
                moduleItem.className = 'module-item';
                moduleItem.innerHTML = `<i class="fa fa-folder-open"></i> ${module.name}`;
                moduleItem.onclick = () => onClickFunction(module.module_id, module.level);
                container.appendChild(moduleItem);
            });
        }
    }

    function getSubModules(rootModuleId) {
        let subModules = [];
        let rootModuleName = '';
        function findSubModules(currentModule) {
            if (currentModule.module_id === rootModuleId) {
                subModules = currentModule.children;
                rootModuleName = currentModule.name;
                return;
            } else {
                currentModule.children.forEach(childModule => {
                    findSubModules(childModule);
                });
            }
        }
        if (rootModuleId === 0) {
            return modules;
        } else {
            modules.forEach(module => {
                findSubModules(module);
            });
        }
        return { rootname: rootModuleName, children: subModules };
    }

    function bindingSubModule(module_id, level) {
        const subModules = getSubModules(module_id);
        displayModules(subModules.rootname, subModules.children, 'modulesLevel2', bindingSubSubModule);
        document.getElementById('modulesLevel3').innerHTML = '';
    }

    function bindingSubSubModule(module_id, level) {
        const subSubModules = getSubModules(module_id);
        displayModules(subSubModules.rootname, subSubModules.children, 'modulesLevel3', () => {});
    }

    // Initialize root modules
    const rootModules = getSubModules(0);
    displayModules('Modules', rootModules, 'modulesLevel1', bindingSubModule);

    document.addEventListener('DOMContentLoaded', () => {
    const addModuleUrl = `${window.location.href}/addModule`;

    const modules = {{{modules}}}; // Use the provided modules data

    populateRootModuleOptions(modules);

    function populateRootModuleOptions(modules) {
        const selectElement = document.querySelector('select[name="module-selection"]');
        selectElement.innerHTML = ''; // Clear existing options

        function createOption(module, prefix = '') {
            const option = document.createElement('option');
            option.value = module.module_id;
            option.textContent = `${prefix}${module.name}`;
            return option;
        }

        function addOptions(modules, prefix = '') {
            modules.forEach(module => {
                if (module.level !== 3) { // Exclude modules with level 3
                    selectElement.appendChild(createOption(module, prefix));
                    if (module.children && module.children.length > 0) {
                        addOptions(module.children, `${prefix}${module.name}/`);
                    }
                }
            });
        }

        addOptions(modules);
    }

    document.querySelector('#modalAddModules .btn-primary').addEventListener('click', () => {
        const moduleName = document.querySelector('#modules-name').value;
        const rootModuleId = document.querySelector('select[name="module-selection"]').value;

        if (!moduleName.trim()) {
            document.getElementById('alertMessage').textContent = 'Module name is required.';
            document.getElementById('alertMessage').style.display = 'block';
            return;
        }

        let parentLevel = 0;
        if (rootModuleId) {
            const parentModule = findModuleById(modules, parseInt(rootModuleId));
            parentLevel = parentModule ? parentModule.level : 0;
        }

        const newModule = {
            name: moduleName,
            root_module_id: rootModuleId ? parseInt(rootModuleId) : null,
            level: parentLevel + 1
        };

        fetch(addModuleUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newModule)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                document.getElementById('alertMessage').textContent = data.message;
                document.getElementById('alertMessage').style.display = 'block';
            }
        })
        .catch(error => {
            document.getElementById('alertMessage').textContent = 'An error occurred. Please try again.';
            document.getElementById('alertMessage').style.display = 'block';
        });
    });

    function findModuleById(modules, id) {
        let foundModule = null;

        function searchModules(modules) {
            for (const module of modules) {
                if (module.module_id === id) {
                    foundModule = module;
                    return;
                } else if (module.children && module.children.length > 0) {
                    searchModules(module.children);
                }
            }
        }

        searchModules(modules);
        return foundModule;
    }
});
</script>